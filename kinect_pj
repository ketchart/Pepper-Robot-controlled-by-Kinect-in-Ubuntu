#!/usr/bin/env python  
import roslib
roslib.load_manifest('kinect_pj')
import rospy
import tf
import math
import argparse
import sys
import qi
import almath
import numpy as np

def RotFromQua(quaternion1,quaternion2):
	quat1 = almath.Quaternion(quaternion1[0],quaternion1[1],quaternion1[2],quaternion1[3])
	quat2 = almath.Quaternion(quaternion2[0],quaternion2[1],quaternion2[2],quaternion2[3])
	rpy1 = almath.Rotation3D.toVector(almath.rotation3DFromQuaternion(quat1))
	rpy2 = almath.Rotation3D.toVector(almath.rotation3DFromQuaternion(quat2))
	R_U1 = almath.rotationFrom3DRotation(rpy1[0],rpy1[1],rpy1[2])
	R_U2 = almath.rotationFrom3DRotation(rpy2[0],rpy2[1],rpy2[2])
	R_12 = almath.Rotation.transpose(R_U1)*R_U2
	rot = almath.Rotation3D.toVector(almath.rotation3DFromRotation(R_12))	
	return rot

def rotate(shoulder_theta , shoulder_phase , elbow_theta, elbow_phase):
	motion_service  = session.service("ALMotion")
   	motion_service.setStiffnesses("RArm", 1.0)
	names            = ["RShoulderPitch","RShoulderRoll","RElbowRoll","RElbowYaw"]
	timelist = [0.6 for i in range(4)]	#speed control
	angles           = [shoulder_theta, shoulder_phase , elbow_theta, elbow_phase]
    	motion_service.angleInterpolation(names,angles,timelist,True)

if __name__ == '__main__':
	rospy.init_node( 'kinect_listener' , anonymous = True)
	listener = tf.TransformListener()
	rate = rospy.Rate(10.0)
	parser = argparse.ArgumentParser()
    	parser.add_argument("--ip", type=str, default="127.0.0.1",
                        help="Robot IP address. On robot or Local Naoqi: use '127.0.0.1'.")
    	parser.add_argument("--port", type=int, default=34679,
                        help="Naoqi port number")
    	args = parser.parse_args()
    	session = qi.Session()
   	try:
        	session.connect("tcp://" + args.ip + ":" + str(args.port))
    	except RuntimeError:
        	print ("Can't connect to Naoqi at ip \"" + args.ip + "\" on port " + str(args.port) +".\n"
               "Please check your script arguments. Run with -h option for help.")
        	sys.exit(1)
	while not rospy.is_shutdown():
		try:
			right_shoulder_trans,right_shoulder_rot = listener.lookupTransform( '/openni_depth_frame' , '/left_shoulder_1' , rospy.Duration() )
			right_elbow_trans,right_elbow_rot = listener.lookupTransform( '/openni_depth_frame' , '/left_elbow_1' , rospy.Duration() )
			right_shoulder_x = right_shoulder_trans[0]
			right_shoulder_y = right_shoulder_trans[1]
			right_shoulder_z = right_shoulder_trans[2]
			right_elbow_x = right_elbow_trans[0]
			right_elbow_y = right_elbow_trans[1]
			right_elbow_z = right_elbow_trans[2]
			shoulder_pitch = math.atan2( -right_elbow_z + right_shoulder_z , -right_elbow_x + right_shoulder_x) 
			shoulder_row = math.atan2( -right_elbow_y + right_shoulder_y , -right_elbow_x + right_shoulder_x)
			rot = RotFromQua(right_shoulder_rot,right_elbow_rot)
			rotate(shoulder_pitch , shoulder_row , rot[0], -rot[2])			
		except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
			continue
		rate.sleep()
  
